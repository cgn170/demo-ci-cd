name: Validate Branch Name and Commit Messages

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate-branch-name:
    name: Validate Branch Name Convention
    runs-on: ubuntu-latest
    steps:
      - name: Check branch name convention
        run: |
          branch_name="${{ github.head_ref }}"
          echo "Branch name: $branch_name"

          # Define the regex pattern
          pattern="^(main|feature|bugfix)\/.*$"

          # Check if branch name matches the pattern
          if [[ $branch_name =~ $pattern ]]; then
            echo "‚úÖ Branch name '$branch_name' follows the convention"
            echo "‚úÖ Pattern: ^(main|feature|bugfix)/*$"
          else
            echo "‚ùå Branch name '$branch_name' does NOT follow the convention"
            echo "‚ùå Expected pattern: ^(main|feature|bugfix)/*$"
            echo ""
            echo "Valid examples:"
            echo "  - feature/CORE-777-add-payment-method"
            echo "  - feature/some-important-feature"
            echo "  - bugfix/fix-login-validation"
            echo "  - bugfix/small-bug-fix-ui-interface"
            echo ""
            echo "Invalid examples:"
            echo "  - my-feature (missing prefix)"
            echo "  - develop (not allowed)"
            echo "  - feature_new_thing (use hyphens, not underscores)"
            echo ""
            exit 1
          fi

  validate-commit-messages:
    name: Validate Conventional Commit Messages
    runs-on: ubuntu-latest
    needs: validate-branch-name
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR commits
        id: commits
        run: |
          # Get all commits in this PR
          git fetch origin ${{ github.base_ref }}
          commits=$(git rev-list --reverse origin/${{ github.base_ref }}..${{ github.sha }})
          echo "Commits to validate:"
          echo "$commits"
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$commits" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Validate commit messages
        run: |
          echo "üîç Validating conventional commit messages..."

          # Define conventional commit pattern
          # Format: type(scope): description
          # type: feat, feature, fix, bugfix
          pattern="^(feat|feature|fix|bugfix|bug)(\(.+\))?: .{1,}"

          # Merge commit patterns to ignore
          merge_pattern="^Merge .+ into .+$|^Merge branch .+$|^Merge pull request .+$|^Merge remote-tracking branch .+$|^Merge tag .+$"

          failed_commits=()
          skipped_commits=()

          # Check each commit
          while IFS= read -r commit_sha; do
            if [ -n "$commit_sha" ]; then
              commit_msg=$(git log --format=%s -n 1 $commit_sha)
              echo ""
              echo "Checking commit: $commit_sha"
              echo "Message: $commit_msg"
              
              # Check if this is a merge commit (has multiple parents)
              parent_count=$(git rev-list --parents -n 1 $commit_sha | wc -w)
              parent_count=$((parent_count - 1))  # Subtract 1 because the first item is the commit itself
              
              # Skip merge commits (either by parent count or message pattern)
              if [ $parent_count -gt 1 ] || [[ $commit_msg =~ $merge_pattern ]]; then
                echo "‚è≠Ô∏è  Skipping merge commit (parents: $parent_count)"
                skipped_commits+=("$commit_sha: $commit_msg")
                continue
              fi
              
              # Validate conventional commit format
              if [[ $commit_msg =~ $pattern ]]; then
                echo "‚úÖ Valid conventional commit format"
              else
                echo "‚ùå Invalid conventional commit format"
                failed_commits+=("$commit_sha: $commit_msg")
              fi
            fi
          done <<< "${{ steps.commits.outputs.commits }}"

          # Report results
          if [ ${#skipped_commits[@]} -gt 0 ]; then
            echo ""
            echo "‚è≠Ô∏è  Skipped merge commits:"
            for skipped_commit in "${skipped_commits[@]}"; do
              echo "  $skipped_commit"
            done
          fi

          if [ ${#failed_commits[@]} -eq 0 ]; then
            echo ""
            echo "üéâ All commit messages follow conventional commit format!"
          else
            echo ""
            echo "‚ùå The following commits do NOT follow conventional commit format:"
            echo ""
            for failed_commit in "${failed_commits[@]}"; do
              echo "  $failed_commit"
            done
            echo ""
            echo "üìã Conventional Commit Format:"
            echo "  <type>: <description>"
            echo "  <type>(scope): <description>"
            echo ""
            echo "Valid types:"
            echo "  - feat: A new feature"
            echo "  - fix: A bug fix"
            echo ""
            echo "‚úÖ Valid examples:"
            echo "  - feat: add user authentication"
            echo "  - fix: resolve login validation error"
            echo "  - fix(ui): correct button alignment on mobile"
            echo ""
            echo "‚ùå Invalid examples:"
            echo "  - added new feature (missing type)"
            echo "  - fix stuff (too vague)"
            echo "  - WIP (work in progress)"
            echo "  - updated code (no type, vague)"
            echo ""
            echo "‚ÑπÔ∏è  Note: Merge commits are automatically skipped from validation"
            echo ""
            exit 1
          fi
